<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Android on BlackMaple&#39;s Blog</title>
    <link>https://blackmaple.me/categories/android/</link>
    <description>Recent content in Android on BlackMaple&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 02 Oct 2021 22:34:24 +0800</lastBuildDate><atom:link href="https://blackmaple.me/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google I/O 2021：LiveData 即將被取代？</title>
      <link>https://blackmaple.me/googleio-2021-livedata-replacement/</link>
      <pubDate>Sat, 02 Oct 2021 22:34:24 +0800</pubDate>
      
      <guid>https://blackmaple.me/googleio-2021-livedata-replacement/</guid>
      <description>在 Google I/O 2021 的 Q&amp;amp;A 中，有一個有趣的問題被提起：Is LiveData going to be deprecated? 翻譯成中文的意思就是，LiveData 會被棄用嗎？
應該有一些人看到這問題被嚇到，想說 LiveData 不是近幾年才出現的嗎？怎麼沒多久就要面臨這問題（囧。
這問題其來有因，讓我們從 LiveData 的出現開始說起吧！
LiveData 的出現 LiveData 在 2017 隨著 Google 推行的 MVVM 架構一同出現，其目的是為了協助使用者實作 MVVM 中 ViewModel 的雙向綁定。LiveData 實做方式是用觀察者模式，這讓很多人聯想到 RxJava，甚至常被拿來與 RxJava 做比較。這邊篇幅有限，因此不會贅述其差異，有興趣的可以自行去了解。
 備註：雖然 RxJava 和 LiveData 都是使用觀察者模式，但其目的和應用場境都有些差異，因此放在一起比較誰好誰壞沒有意義。
 LiveData 的特色 因為 LiveData 簡單易用的特性，使它很適合用來處理資料與介面之間的綁定。當資料更新時，它可以自動去更新介面。同時，它結合了另一個 Jetpack 套件 — Lifecycle，讓它只會在介面處於 STARTED 或 RESUMED 的時候，才會觸發更新，避免許多生命週期的問題。
或許有人會覺得 RxJava 不就可以做到一樣的事情了嗎？確實，上面提到的需求 RxJava 都可以實現，但 RxJava 使用起來遠比 LiveData 複雜，因此在簡單的場景，LiveData 更能勝任，所以常會看到一些文章或專案將 LiveData 與 RxJava 互相搭配使用。</description>
    </item>
    
    <item>
      <title>Google OAuth 登入新帳戶失敗（12502）</title>
      <link>https://blackmaple.me/google-oauth-12502/</link>
      <pubDate>Thu, 02 Sep 2021 09:27:22 +0800</pubDate>
      
      <guid>https://blackmaple.me/google-oauth-12502/</guid>
      <description>今天在開發的時候遇到 GoogleSignIn 在 onActivityResult() 時回復 status code 12502，需要再一次登入才會成功。查了官方文件，對照的 Constant 是 SIGN_IN_CURRENTLY_IN_PROGRESS，它意思是「登入程序正在進行中，因此無法繼續」。網路上有人提到說如果在 manifest 或是 Intent flag 中將 noHistory 設為 true 也會遇到這問題，但我自己沒設為 true 也遇到（囧
重現方式 使用 Google OAuth 登入，點擊「新增其他帳戶」，然後使用剛新增的帳戶來登入，則會遇到 SIGN_IN_CURRENTLY_IN_PROGRESS (12502)，之後再重新點擊同個帳號登入則可以成功。
解決方法 在 googlesamples/google-services 上看到有人發類似的 issue，但這問題一直 open。下面有人提出 workaround 可以暫時解決這問題：
1 2 3 4 5 6 7 8 9 10  if (e.getStatusCode() == SIGN_IN_CURRENTLY_IN_PROGRESS) { /* * https://github.com/googlesamples/google-services/issues/345 */ GoogleSignInAccount accountOld = GoogleSignIn.getLastSignedInAccount(activity.getApplicationContext()); if (accountOld != null) { LOG.info(&amp;#34;Got cached sign-in&amp;#34;); handleSignedInAccount(accountOld); } }   不過這解法也不是到很理想，還是期待官方能解決這問題，或至少更詳細的說明發生的原因，不然單純看到 SIGN_IN_CURRENTLY_IN_PROGRESS 會滿問號的（囧</description>
    </item>
    
    <item>
      <title>在 M1 Macbook 下開發 Android</title>
      <link>https://blackmaple.me/android-studio-in-m1-mac/</link>
      <pubDate>Wed, 05 May 2021 16:56:45 +0800</pubDate>
      
      <guid>https://blackmaple.me/android-studio-in-m1-mac/</guid>
      <description>&lt;p&gt;在購買 Macbook Air M1 後，被它的效能和續航驚艷到了，但同時，還有許多應用沒有很好的支援 M1 晶片。所以身為 Android Developer 的我 ，當然要來嘗試在 M1 晶片下運行 Android Studio 看看啦～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Android] PopupWindow 設置 gravity 無效的問題</title>
      <link>https://blackmaple.me/android-popupwindow-gravity-issue/</link>
      <pubDate>Tue, 13 Oct 2020 19:51:44 +0800</pubDate>
      
      <guid>https://blackmaple.me/android-popupwindow-gravity-issue/</guid>
      <description>前言 今天在寫公司專案的時候遇到部分 Android 7 的手機，PopupWindow 不會理會設置好的 gravity，會直接跑到頂部。
原因 在 Android Code Search 追了一下原始碼，發現 Android 7 在執行 PopupWindow.update() 的時候，會將 gravity 重設，因此造成 gravity 被重置為 Gravity.START | Gravity.TOP。
有興趣的話可以自己看一下 Google 後來修復的 commit
解法 剛好出問題的那段程式看起來沒有必要使用 update()，因此拿掉後問題就修復了。當然如果你一定需要使用 update() 的話，可以參考這篇 SlackOverflow，裡面有各種大神給的解法，這邊就不贅述囉！</description>
    </item>
    
    <item>
      <title>Android 11 新增無線偵錯 (Wireless Debugging)</title>
      <link>https://blackmaple.me/android-11-wireless-debug/</link>
      <pubDate>Sat, 10 Oct 2020 03:57:04 +0800</pubDate>
      
      <guid>https://blackmaple.me/android-11-wireless-debug/</guid>
      <description>&lt;p&gt;不久前 Android 11 正式發布，可以看到有許多很酷炫的新功能，其中對身為 Android 開發者的我來說最興奮的應該就是「無線偵錯」了，這樣出門就可以更方便的開發了，因此趁著這段空閑就來試試看！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android 學習問題紀錄</title>
      <link>https://blackmaple.me/android-%E5%AD%B8%E7%BF%92%E5%95%8F%E9%A1%8C%E7%B4%80%E9%8C%84/</link>
      <pubDate>Wed, 28 Feb 2018 14:46:05 +0000</pubDate>
      
      <guid>https://blackmaple.me/android-%E5%AD%B8%E7%BF%92%E5%95%8F%E9%A1%8C%E7%B4%80%E9%8C%84/</guid>
      <description>&lt;h2 id=&#34;紀錄-1&#34;&gt;紀錄 1&lt;/h2&gt;
&lt;h3 id=&#34;問題&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;在 OkHttp 的 onResponse 中使用 Toast 會噴錯，但 Retrofit 不會。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>android:gravity 和 android:layout_gravity 的差別</title>
      <link>https://blackmaple.me/android-gravity%E5%92%8Candroid-layout-gravity%E7%9A%84%E5%B7%AE%E5%88%A5/</link>
      <pubDate>Sat, 20 Jan 2018 15:01:10 +0000</pubDate>
      
      <guid>https://blackmaple.me/android-gravity%E5%92%8Candroid-layout-gravity%E7%9A%84%E5%B7%AE%E5%88%A5/</guid>
      <description>&lt;p&gt;在 Android 介面設計中，常會用到  android:gravity 和 android:layout_gravity 兩種屬性，但卻容易被搞混，因此這邊做簡單的介紹，讓大家釐清差別。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Studio 技巧整理</title>
      <link>https://blackmaple.me/android-studio%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/</link>
      <pubDate>Sat, 13 Jan 2018 13:13:32 +0000</pubDate>
      
      <guid>https://blackmaple.me/android-studio%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/</guid>
      <description>&lt;p&gt;最近開始研究 Android Studio，得知一些可以增加開發速度的小技巧，因此在這邊做一下記錄。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Android] 在 static method  中取得 String Resource</title>
      <link>https://blackmaple.me/%E5%9C%A8-static-method-%E5%8F%96%E5%BE%97-string-resourse/</link>
      <pubDate>Thu, 21 Dec 2017 19:29:30 +0000</pubDate>
      
      <guid>https://blackmaple.me/%E5%9C%A8-static-method-%E5%8F%96%E5%BE%97-string-resourse/</guid>
      <description>&lt;h2 id=&#34;遇到問題&#34;&gt;遇到問題&lt;/h2&gt;
&lt;p&gt;最近在寫一個 Singleton 的類別時，遇到需要透過 Resource id 取得 string 的需求，原本想用 context.getString(int resId) 的方式取得，但發現 Context 不適合被 static 成員或類別引用，會導致內存泄露。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android: getColor(int id) deprecated</title>
      <link>https://blackmaple.me/android-getcolor-deprecated/</link>
      <pubDate>Wed, 20 Dec 2017 12:27:18 +0000</pubDate>
      
      <guid>https://blackmaple.me/android-getcolor-deprecated/</guid>
      <description>&lt;p&gt;從 Android 6 開始，一個新的 getColor() 方法出現，舊的 Resource.getColor(int id) 則被廢棄。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Android] Error：Fragment already added</title>
      <link>https://blackmaple.me/error-fragment-already-added/</link>
      <pubDate>Tue, 19 Dec 2017 21:46:44 +0000</pubDate>
      
      <guid>https://blackmaple.me/error-fragment-already-added/</guid>
      <description>&lt;h2 id=&#34;遇到狀況&#34;&gt;遇到狀況&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;java.lang.IllegalStateException: Fragment already added
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Android: NotificationCompat 與 Notification 差別</title>
      <link>https://blackmaple.me/android-notificationcompat-vs-notification/</link>
      <pubDate>Tue, 19 Dec 2017 21:23:54 +0000</pubDate>
      
      <guid>https://blackmaple.me/android-notificationcompat-vs-notification/</guid>
      <description>&lt;p&gt;Notification.Builder 是 Android 3.0 (API 11) 引入的。如要兼容低版本，可以使用 Support V4 包提供的 NotificationCompat.Builder。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
